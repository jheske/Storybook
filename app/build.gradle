plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'dagger.hilt.android.plugin'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.compose.storybook"
        minSdk 24
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildFeatures {
        dataBinding = true
        viewBinding true
        // Enable Jetpack Compose for this module
        compose true
    }

    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }

    composeOptions {

        // WARNING: Be careful when upgrading kotlin_version, compose_version,
        // or compose_runtime_version. It can be difficult to get them in sync.
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion kotlin_version
    }
}

dependencies {
    implementation project(':composables')

    // Kotlin
    implementation "androidx.core:core-ktx:$kotlin_core_version"

    // Compose
    implementation "androidx.compose.runtime:runtime:$compose_runtime_version"
    implementation "androidx.compose.runtime:runtime-livedata:1.1.0-rc01"
    implementation "androidx.activity:activity-compose:$activity_compose_version"
    implementation "androidx.compose.material:material:$compose_material_version"
    implementation "androidx.compose.animation:animation:$compose_material_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_material_version"  // Previews, etc.
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_compose_version"
    // Use these last two libs if you want Compose to inherit the themes available
    // in the View system instead of rewriting your own Material theme in Compose from scratch.
    //   MDC theme
    // implementation "com.google.android.material:compose-theme-adapter:1.1.2"
    //   AppCompat theme
    // implementation "com.google.accompanist:accompanist-appcompat-theme:0.16.0"

    // UI
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "com.google.android.material:material:$material_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    //Hilt DI (dependency injection)
    implementation "com.google.dagger:hilt-android:$dagger_hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$dagger_hilt_version"

    // Hilt DI ViewModel extension
    implementation "androidx.hilt:hilt-lifecycle-viewmodel:$dagger_hilt_lifecycle_version"
    kapt "androidx.hilt:hilt-compiler:$dagger_hilt_lifecycle_version"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //Lifecycle / ViewModels
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_extension_version"

    // Libs for "by viewModels<>()" and new startActivityForResult (old method is deprecated)
    implementation "androidx.activity:activity-ktx:$activity_ktx_version"
    implementation "androidx.fragment:fragment-ktx:$activity_ktx_version"

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}